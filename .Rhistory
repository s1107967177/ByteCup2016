getwd()
installed.packages("arules")
install.packages("arules")
install.packages("doParallel")
help("doParallel")
library(foreach)
help("foreach")
library(doParallel)
source("attribute_construction.R")
setwd("/root/文档/RProject/bytecup")
source("read_data.R")
source("attribute_construction.R")
train <- attr.add(train)
stopCluster(cl)
a <- matrix(1:16, 4, 4)
b <- t(a)
foreach(b=iter(b, by='col'), .combine=cbind) %dopar%
(a %*% b)
return(data)
foreach(b=iter(b, by='col'), .combine=cbind) %dopar%
(a %*% b)
a
b
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% d
identical(s, d)
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% didentical(s, d)
stopCluster(cl)
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% s*d
stopCluster(cl)
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
d <- data.frame(x=1:10, y=rnorm(10))
s <- foreach(d=iter(d, by='row'), .combine=rbind) %dopar% d[1]*d[2]
stopCluster(cl)
rbind(1:2.1:2)
rbind(1:2,1:2)
head(train)
len <- nrow(data)
attr.add(train[1:20,])
setwd("/root/文档/RProject/bytecup")
source("read_data.R")
source("attribute_construction.R")
attr.add(train[1:20,])
attr.add(train[1:20,])
len <- nrow(data)
head(train)
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
attr.add(train[1:20,])
source("attribute_construction.R")
source("attribute_construction.R")
warnings()
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
View(attr.con)
setwd("/root/文档/RProject/bytecup")
source("read_data.R")
source("attribute_construction.R")
attr.add(train[1:20,])
help("doParallel")
help("registerDoParallel")
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
stopCluster(cl)
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
source("attribute_construction.R")
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
help("do.call")
source("attribute_construction.R")
attr.add(train[1:20,])
View(attr.add)
library(iterators)
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
iter(train[1:10,], by='row')
d <- iter(train[1:10,], by='row')
d
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("read_data.R")
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("read_data.R")
source("attribute_construction.R")
warnings()
source("attribute_construction.R")
attr.add(train[1:20,])
help("makeForkCluster")
help("foreach")
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
head(train)
source("attribute_construction.R")
source("attribute_construction.R")
attr.add(train[1:20,])
help("makeForkCluster")
help("registerDoParallel")
source("attribute_construction.R")
attr.add(train[1:20,])
help("foreach")
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
help("print")
source("attribute_construction.R")
attr.add(train[1:20,])
help("makeCluster")
help("getOption")
help("makeCluster")
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
help("cat")
source("attribute_construction.R")
attr.add(train[1:20,])
source("attribute_construction.R")
attr.add(train[1:20,])
help("foreach")
source("attribute_construction.R")
attr.add(train[1:20,])
help("times")
help("times")
source("attribute_construction.R")
system.time(attr.add(train[1:20,]))
system.time(attr.add(train[1:20,]))
source("attribute_construction.R")
system.time(attr.add(train[1:200,]))
source("attribute_construction.R")
system.time(attr.add(train[1:200,]))
setwd("/root/文档/RProject/bytecup")
source("read_data.R")
source("attribute_construction.R")
cat("train adding ...")
train <- attr.add(train)
setwd("/root/文档/RProject/bytecup")
source("read_data.R")
source("attribute_construction.R")
cat("train adding ...")
train <- attr.add(train)
vnolab <- read.csv("validate_nolabel.txt", stringsAsFactors = F, header = T)
cat("vnolab adding...")
vnolab <- attr.add(vnolab)
library(kernlab)
train$is.answered <- as.factor(train$is.answered)
fit <- ksvm(is.answered~freq+exp, data = train, kernel = "polydot", prob.model = T)
vnolab$label <- predict(fit, vnolab, type = "probabilities")[,2]
write.csv(vnolab[,1:3], file = "temp.csv", fileEncoding = "utf8", row.names = F)
head(train)
save(train, "train.RData")
save(train, file = "train.RData")
save(vnolab, "vnolab.RData")
save(vnolab, file = "vnolab.RData")
head(vnolab)
fit <- ksvm(is.answered~freq+exp, data = train, kernel = "vanilladot", prob.model = T)
vnolab$label <- predict(fit, vnolab, type = "probabilities")[,2]
write.csv(vnolab[,1:3], file = "temp.csv", fileEncoding = "utf8", row.names = F)
